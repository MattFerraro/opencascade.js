typedef double Standard_Real;
typedef boolean Standard_Boolean;
typedef long Standard_Integer;
typedef DOMString Standard_CString;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Shape{
	Standard_Boolean IsNull();
	TopAbs_Orientation Orientation();
	// void TShape([Const, Ref] Handle_TopoDS_TShape theTShape);
	// void DumpJson(
	// 	[Ref] Standard_Ostream theOstream,
	// 	[Const] Standard_Integer theDepth = -1
	// );
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface GProp_GProps{
	void GProp_GProps();
	void GProp_GProps([Const, Ref] gp_Pnt SystemLocation);
	Standard_Real Mass();
	[Value] gp_Pnt CentreOfMass();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepGProp{
	static void SurfaceProperties(
		[Const, Ref] TopoDS_Shape S,
		[Ref] GProp_GProps SProps,
		[Const] optional Standard_Boolean SkipShared = false,
		[Const] optional Standard_Boolean UseTriangulation = false
	);
	static void VolumeProperties(
		[Const, Ref] TopoDS_Shape S,
		[Ref] GProp_GProps VProps,
		[Const] optional Standard_Boolean OnlyClosed = false,
		[Const] optional Standard_Boolean SkipShared = false,
		[Const] optional Standard_Boolean UseTriangulation = false
	);
};

// BRepMesh_IncrementalMesh.hxx
interface BRepMesh_IncrementalMesh{
	void BRepMesh_IncrementalMesh();
	void BRepMesh_IncrementalMesh(
		[Const, Ref] TopoDS_Shape theShape,
		[Const] Standard_Real theLinDeflection
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Bnd_Box {
	void Bnd_Box();
	void Bnd_Box(
		[Const, Ref] gp_Pnt theMin,
		[Const, Ref] gp_Pnt theMax
	);
	// void Get(
	// 	[Ref] Standard_Real theXmin,
	// 	[Ref] Standard_Real theYmin,
	// 	[Ref] Standard_Real theZmin,
	// 	[Ref] Standard_Real theXmax,
	// 	[Ref] Standard_Real theYmax,
	// 	[Ref] Standard_Real theZmax
	// );
	Standard_Real GetXmin();
	Standard_Real GetXmax();
	Standard_Real GetYmin();
	Standard_Real GetYmax();
	Standard_Real GetZmin();
	Standard_Real GetZmax();
	// void DumpJson(
	// 	[Ref] Standard_OStream theOStream,
	// 	[Const] optional Standard_Integer theDepth -1
	// );
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepBndLib {
	static void Add(
		[Const, Ref] TopoDS_Shape S,
		[Ref] Bnd_Box B,
		[Const] optional Standard_Boolean useTriangulation = true
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface gp_Pnt {
	void SetX([Const] Standard_Real X);
	void SetY([Const] Standard_Real Y);
	void SetZ([Const] Standard_Real Z);
	// void Coord(
	//   [Ref] Standard_Real Xp,
	//   [Ref] Standard_Real Yp,
	//   [Ref] Standard_Real Zp
	// );
	Standard_Real X();
	Standard_Real Y();
	Standard_Real Z();
	Standard_Boolean IsEqual(
		[Const, Ref] gp_Pnt Other,
		[Const] Standard_Real LinearTolerance
	);
	[Value] gp_Pnt Transformed([Const, Ref] gp_Trsf T);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Edge : TopoDS_Shape{
};
TopoDS_Wire implements TopoDS_Shape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Wire : TopoDS_Shape{
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Compound : TopoDS_Shape{
	void TopoDS_Compound();
};
TopoDS_Face implements TopoDS_Shape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Face : TopoDS_Shape{
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Vertex : TopoDS_Shape{
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface gp_Dir{
	// void Coord(
	//   [Ref] Standard_Real Xv,
	//   [Ref] Standard_Real Yv,
	//   [Ref] Standard_Real Zv
	// );
	Standard_Real X();
	Standard_Real Y();
	Standard_Real Z();
	[Value] gp_Dir Transformed([Const, Ref] gp_Trsf T);
};

interface gp_Trsf{
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS {
  [Const, Ref] static TopoDS_Edge Edge([Const, Ref] TopoDS_Shape S);
  [Const, Ref] static TopoDS_Face Face([Const, Ref] TopoDS_Shape S);
  // [Const, Ref] TopoDS_Shell Shell([Const, Ref] TopoDS_Shape S);
  // [Const, Ref] TopoDS_Solid Solid([Const, Ref] TopoDS_Shape S);
  // [Const, Ref] TopoDS_CompSolid CompSolid([Const, Ref] TopoDS_Shape S);
  // [Const, Ref] TopoDS_Compound Compound([Const, Ref] TopoDS_Shape S);
};

interface BRepBuilderAPI_MakeFace{
	void BRepBuilderAPI_MakeFace(
		[Const, Ref]TopoDS_Wire W,
		[Const] optional Standard_Boolean OnlyPlane = false
	);
	[Const,Ref] TopoDS_Face Face();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopExp_Explorer {
	void TopExp_Explorer();
	void TopExp_Explorer(
		[Const, Ref] TopoDS_Shape S,
		[Const] TopAbs_ShapeEnum ToFind,
		[Const] optional TopAbs_ShapeEnum ToAvoid = "TopAbs_SHAPE"
	);
	void Init(
		[Const, Ref] TopoDS_Shape S,
		[Const] TopAbs_ShapeEnum ToFind,
		[Const] optional TopAbs_ShapeEnum ToAvoid = "TopAbs_SHAPE"
	);
	Standard_Boolean More();
	void Next();
	[Const, Ref] TopoDS_Shape Current();
};

interface TopLoc_Location {
	void TopLoc_Location();
	void TopLoc_Location([Const, Ref] gp_Trsf T);
	[Const, Ref] gp_Trsf Transformation();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Adaptor3d_Curve {
	// [Value] Handle_Geom_BezierCurve Bezier();
	// [Value] Handle_Geom_BSplineCurve BSpline();
	// [Value] Handle_Geom_OffsetCurve OffsetCurve();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepAdaptor_Curve : Adaptor3d_Curve{
	void BRepAdaptor_Curve();
	void BRepAdaptor_Curve([Const, Ref] TopoDS_Edge E);
	void BRepAdaptor_Curve(
		[Const, Ref] TopoDS_Edge E,
		[Const, Ref] TopoDS_Face F
	);
	// [Value] Handle_Geom_BezierCurve Bezier();
	// [Value] Handle_Geom_BSplineCurve BSpline();
	// [Value] Handle_Geom_OffsetCurve OffsetCurve();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface GCPnts_TangentialDeflection {
	void GCPnts_TangentialDeflection();
	void GCPnts_TangentialDeflection(
		[Const, Ref] Adaptor3d_Curve C,
		[Const] Standard_Real AngularDeflection,
		[Const] Standard_Real CurvatureDeflection,
		[Const] optional Standard_Integer MinimumOfPoints = 2,
		[Const] optional Standard_Real UTol = 1.0e-9,
		[Const] optional Standard_Real theMinLen = 1.0e-7
	);
	void GCPnts_TangentialDeflection(
		[Const, Ref] Adaptor3d_Curve C,
		[Const] Standard_Real FirstParameter,
		[Const] Standard_Real LastParameter,
		[Const] Standard_Real AngularDeflection,
		[Const] Standard_Real CurvatureDeflection,
		[Const] Standard_Integer MinimumOfPoints,
		[Const] Standard_Real UTol,
		[Const] Standard_Real theMinLen
	);
	Standard_Integer NbPoints();
	[Value] gp_Pnt Value([Const] Standard_Integer I);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRep_Tool {
	[Const, Ref] static Handle_Poly_Triangulation Triangulation(
		[Const, Ref] TopoDS_Face F,
		[Ref] TopLoc_Location L
	);
};

interface Handle_Poly_Triangulation {
	boolean IsNull();
	Poly_Triangulation get();
};

interface Handle_Message_ProgressIndicator {
};

interface TColgp_Array1OfPnt {
	Standard_Integer Length();
	Standard_Integer Lower();
	Standard_Integer Upper();
	[Const, Ref] gp_Pnt Value([Const] Standard_Integer theIndex);
};

interface TColgp_Array1OfDir {
	void TColgp_Array1OfDir();
	void TColgp_Array1OfDir(
		[Const] Standard_Integer theLower,
		[Const] Standard_Integer theUpper
	);
	Standard_Integer Length();
	Standard_Integer Lower();
	Standard_Integer Upper();
	[Const, Ref] gp_Dir Value([Const] Standard_Integer theIndex);
};

interface Poly_Array1OfTriangle {
	Standard_Integer Length();
	Standard_Integer Lower();
	Standard_Integer Upper();
	[Const, Ref] Poly_Triangle Value([Const] Standard_Integer theIndex);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Poly_Triangulation {
	void Poly_Triangulation(
		[Const] Standard_Integer nbNodes,
		[Const] Standard_Integer nbTriangles,
		[Const] Standard_Boolean UVNodes
	);
	void Poly_Triangulation([Const, Ref] Handle_Poly_Triangulation theTriangulation);
	Standard_Integer NbTriangles();
	[Const, Ref] TColgp_Array1OfPnt Nodes();
	[Ref] TColgp_Array1OfPnt ChangeNodes();
	// [Const, Ref] gp_Pnt Node([Const] Standard_Integer theIndex);
	// [Ref] gp_Pnt ChangeNode([Const] Standard_Integer theIndex);
	// [Const, Ref] TColgp_Array1OfPnt2d UVNodes();
	// [Ref] TColgp_Array1OfPnt2d ChangeUVNodes();
	// [Const, Ref] gp_Pnt2d UVNode([Const] Standard_Integer theIndex);
	[Const, Ref] Poly_Array1OfTriangle Triangles();
	[Ref] Poly_Array1OfTriangle ChangeTriangles();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Poly_Triangle {
	void Set(
		[Const] Standard_Integer N1,
		[Const] Standard_Integer N2,
		[Const] Standard_Integer N3
	);
	void Set(
		[Const] Standard_Integer Index,
		[Const] Standard_Integer Node
	);
	// void Get(
	// 	[Ref] Standard_Integer N1,
	// 	[Ref] Standard_Integer N2,
	// 	[Ref] Standard_Integer N3
	// );
	Standard_Integer Value([Const] Standard_Integer Index);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Poly_Connect {
	void Poly_Connect();
	void Poly_Connect([Const, Ref] Handle_Poly_Triangulation theTriangulation);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface StdPrs_ToolTriangulatedShape {
	void StdPrs_ToolTriangulatedShape();
	static void Normal(
		[Const, Ref] TopoDS_Face theFace,
		[Ref] Poly_Connect thePolyConnect,
		[Ref] TColgp_Array1OfDir theNormals
	);
	// static Standard_Boolean IsTessellated(
	// 	[Const, Ref] TopoDS_Shape theShape,
	// 	[Const, Ref] Handle_Prs3d_Drawer theDrawer
	// );
	// static Standard_Boolean Tessellate(
	// 	[Const, Ref] TopoDS_Shape theShape,
	// 	[Const, Ref] Handle_Prs3d_Drawer theDrawer
	// );
	// static void ClearOnOwnDeflectionChange(
	// 	[Const, Ref] TopoDS_Shape theShape,
	// 	[Const, Ref] Handle_Prs3d_Drawer,
	// 	[Const] Standard_Boolean theToResetCoeff
	// );
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepBuilderAPI_Sewing {
	void BRepBuilderAPI_Sewing(
		[Const] optional Standard_Real tolerance = 1e-6,
		[Const] optional Standard_Boolean option1 = true,
		[Const] optional Standard_Boolean option2 = true,
		[Const] optional Standard_Boolean option3 = true,
		[Const] optional Standard_Boolean option4 = false
	);
	void Load([Const, Ref] TopoDS_Shape shape);
	void Perform([Const, Ref] optional Handle_Message_ProgressIndicator thePI);
	[Const, Ref] TopoDS_Shape SewedShape();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Builder {
	// void MakeShell([Ref] TopoDS_Shell S);
	// void MakeSolid([Ref] TopoDS_Solid S);
	// void MakeCompSolid([Ref] TopoDS_CompSolid C);
	void MakeCompound([Ref] TopoDS_Compound C);
	void Add(
		[Ref] TopoDS_Shape S,
		[Const, Ref] TopoDS_Shape C
	);
};
BRep_Builder implements TopoDS_Builder;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRep_Builder : TopoDS_Builder {
	void BRep_Builder();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepAdaptor_Surface {
	void BRepAdaptor_Surface();
	void BRepAdaptor_Surface(
		[Const, Ref] TopoDS_Face F,
		[Const] optional Standard_Boolean R = true
	);
	GeomAbs_SurfaceType GetType();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum TopAbs_Orientation {
	"TopAbs_FORWARD",
	"TopAbs_REVERSED",
	"TopAbs_INTERNAL",
	"TopAbs_EXTERNAL"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum TopAbs_ShapeEnum {
	"TopAbs_COMPOUND",
	"TopAbs_COMPSOLID",
	"TopAbs_SOLID",
	"TopAbs_SHELL",
	"TopAbs_FACE",
	"TopAbs_WIRE",
	"TopAbs_EDGE",
	"TopAbs_VERTEX",
	"TopAbs_SHAPE"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum GeomAbs_SurfaceType
{
	"GeomAbs_Plane",
	"GeomAbs_Cylinder",
	"GeomAbs_Cone",
	"GeomAbs_Sphere",
	"GeomAbs_Torus",
	"GeomAbs_BezierSurface",
	"GeomAbs_BSplineSurface",
	"GeomAbs_SurfaceOfRevolution",
	"GeomAbs_SurfaceOfExtrusion",
	"GeomAbs_OffsetSurface",
	"GeomAbs_OtherSurface"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepBuilderAPI_MakeVertex{
	void BRepBuilderAPI_MakeVertex([Const, Ref] gp_Pnt P);
	[Const, Ref] TopoDS_Vertex Vertex();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepBuilderAPI_MakePolygon {
	void BRepBuilderAPI_MakePolygon();
	// void BRepBuilderAPI_MakePolygon(
	// 	[Const, Ref] gp_Pnt P1,
	// 	[Const, Ref] gp_Pnt P2
	// );
	// void BRepBuilderAPI_MakePolygon(
	// 	[Const, Ref] gp_Pnt P1,
	// 	[Const, Ref] gp_Pnt P2,
	// 	[Const, Ref] gp_Pnt P3,
	// 	[Const] Standard_Boolean Close
	// );
	// void BRepBuilderAPI_MakePolygon(
	// 	[Const, Ref] gp_Pnt P1,
	// 	[Const, Ref] gp_Pnt P2,
	// 	[Const, Ref] gp_Pnt P3,
	// 	[Const, Ref] gp_Pnt P4,
	// 	[Const] Standard_Boolean Close
	// );
	void BRepBuilderAPI_MakePolygon(
		[Const, Ref] TopoDS_Vertex V1,
		[Const, Ref] TopoDS_Vertex V2
	);
	void BRepBuilderAPI_MakePolygon(
		[Const, Ref] TopoDS_Vertex V1,
		[Const, Ref] TopoDS_Vertex V2,
		[Const, Ref] TopoDS_Vertex V3,
		[Const] Standard_Boolean Close
	);
	void BRepBuilderAPI_MakePolygon(
		[Const, Ref] TopoDS_Vertex V1,
		[Const, Ref] TopoDS_Vertex V2,
		[Const, Ref] TopoDS_Vertex V3,
		[Const, Ref] TopoDS_Vertex V4,
		[Const] Standard_Boolean Close
	);
	[Const, Ref] TopoDS_Wire Wire();
};

enum IFSelect_ReturnStatus{
	"IFSelect_RetVoid",
	"IFSelect_RetDone",
	"IFSelect_RetError",
	"IFSelect_RetFail",
	"IFSelect_RetStop"
};

interface XSControl_Reader {
	IFSelect_ReturnStatus ReadFile ([Const] DOMString filename);
	// Standard_Boolean TransferEntity([Const, Ref] Handle_Standard_Transient start);
	// Standard_Integer TransferList([Const, Ref] Handle_TColStd_HSequenceOfTransient list);
	Standard_Integer TransferRoots();
	[Value] TopoDS_Shape OneShape();
};
STEPControl_Reader implements XSControl_Reader;

interface STEPControl_Reader : XSControl_Reader {
	void STEPControl_Reader();
};
IGESControl_Reader implements XSControl_Reader;

interface IGESControl_Reader : XSControl_Reader{
	void IGESControl_Reader();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum BRepOffset_Mode {
	"BRepOffset_Skin",
	"BRepOffset_Pipe",
	"BRepOffset_RectoVerso"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum GeomAbs_JoinType
{
	"GeomAbs_Arc",
	"GeomAbs_Tangent",
	"GeomAbs_Intersection"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum GeomAbs_Shape
{
	"GeomAbs_C0",
	"GeomAbs_G1",
	"GeomAbs_C1",
	"GeomAbs_G2",
	"GeomAbs_C2",
	"GeomAbs_C3",
	"GeomAbs_CN"
};